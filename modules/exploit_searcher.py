import argparse
import requests
from bs4 import BeautifulSoup

def search_exploits(keyword):
    url = f"https://www.exploit-db.com/search?q={keyword}"
    response = requests.get(url)
    
    if response.status_code != 200:
        print(f"Failed to search for exploits. HTTP status code: {response.status_code}")
        return []

    soup = BeautifulSoup(response.text, 'html.parser')
    results = []
    for row in soup.find_all('tr')[1:]:  # Skip header row
        columns = row.find_all('td')
        if len(columns) > 1:
            exploit_id = columns[0].text.strip()
            description = columns[1].text.strip()
            results.append((exploit_id, description))
    return results

def download_exploit(exploit_id, output_file):
    url = f"https://www.exploit-db.com/download/{exploit_id}"
    response = requests.get(url)
    
    if response.status_code == 200:
        with open(output_file, 'wb') as file:
            file.write(response.content)
        print(f"Exploit {exploit_id} successfully downloaded to {output_file}")
    else:
        print(f"Failed to download exploit {exploit_id}. HTTP status code: {response.status_code}")

def main():
    parser = argparse.ArgumentParser(description='Exploit DB search and downloader')
    parser.add_argument('keyword', type=str, help='Keyword to search for exploits')
    parser.add_argument('-o', '--output', type=str, default='exploit.c', help='Output file name')

    args = parser.parse_args()
    
    results = search_exploits(args.keyword)
    if not results:
        print("No exploits found.")
        return

    print("Exploits found:")
    for i, (exploit_id, description) in enumerate(results, start=1):
        print(f"{i}. {description} (ID: {exploit_id})")

    choice = input("Enter the number of the exploit you want to download: ")
    try:
        index = int(choice) - 1
        if 0 <= index < len(results):
            selected_exploit = results[index]
            download_exploit(selected_exploit[0], args.output)
            print(f"To use the exploit, compile and run it with appropriate parameters.")
        else:
            print("Invalid selection.")
    except ValueError:
        print("Invalid input. Please enter a number.")
        
if __name__ == "__main__":
    main()